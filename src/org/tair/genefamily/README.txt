The following is a guide to what you need to understand and modify to implement 
the functionality at http://www.arabidopsis.org/jsp/ChromosomeMap/tool.jsp as a
standalone web application outside of the TAIR system.

The file distribution is in a zip file containing the following files:

   jsp/ChromosomeMap/tool.jsp
 
   org/arabidopsis/genefamily/GenericFeature.java
   org/arabidopsis/genefamily/HomologyGroups.java
   org/arabidopsis/genefamily/HomologyGroup.java
   org/arabidopsis/genefamily/Chromosome.java
   org/arabidopsis/genefamily/ViewChromosomes.java
   org/arabidopsis/genefamily/GeneInfo.java
   org/arabidopsis/genefamily/FindGenes.java
   org/arabidopsis/genefamily/ChromosomeMap.java

There are two key files:

 * jsp/ChromosomeMap/tool.jsp
 * org/arabidopsis/genefamily/ViewChromosomes.java

* tool.jsp

This Java Server Page file contains the form for collecting the locus, zoom, 
page name, and color information. To make changes to the visual display, you'll
need to change this file.

* ViewChromosomes.java

This is the servlet that handles the POST from the tool page. Most of the work 
for displaying the chromosome map is in this class.

You'll need to integrate the JSP and servlet into an application server with 
the appropriate entries in your web.xml file. One possible way to do this 
if you are using servlets is to create a new servlet and servlet-mapping in 
your web.xml

        <servlet>
                <servlet-name>ViewChromosomes</servlet-name>
                <servlet-class>
                        org.tair.genefamily.ViewChromosomes
                </servlet-class>
                <display-name>ViewChromosomes</display-name>
                <load-on-startup>10</load-on-startup>
                <description />
        </servlet>
        <servlet-mapping>
                <url-pattern>/servlets/ViewChromosomes</url-pattern>
                <servlet-name>ViewChromosomes</servlet-name>
        </servlet-mapping>
        
When the application server creates an instance of this class, it starts off 
by getting the chromosome length and centromere position information from the 
Arabidopsis database so that the map is generated from the most current data. 
To adapt this code to take advantage of a different data source, you must 
modify the loadChromosomeLengths and loadCentromeres methods. Currently, the 
connection to the Arabidopsis database uses the src.tfc.DBReadManager and 
src.tfc.DBconnection packages that are internal to TAIR. To use a different 
database that will serve as the data source, supply your own manager and
connection classes. If the data set is static, then just remove that code
and modify these methods to read the file:

* loadChromosomeLengths(): sets chromosomeLengths (an array of long) to have 
                           the length of each chromosome at index 
                           chromosomeNumber-1
* loadCentromeres(): sets centromeres (an array of long) to have the start 
                     position of each centromere at index chromosomeNumber-1

* doGet(): handles the GET request for ViewChromosomes.java and outputs the 
           correct HTML
  
Additionally, the HTML generated by the doGet method creates and uses TAIR-
specific URLs to link to individual loci. To create the same functionality, you
must implement a page that displays the locus information given a name. You can
use URLs to a genome database or some other mechanism in place of the TAIR
query URLs in the current implementation.

